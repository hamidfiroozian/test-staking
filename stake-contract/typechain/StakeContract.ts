/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface StakeContractInterface extends utils.Interface {
  contractName: "StakeContract";
  functions: {
    "erc20Contract()": FunctionFragment;
    "owner()": FunctionFragment;
    "stakeTokens(address,uint256,uint8)": FunctionFragment;
    "stakes(uint256)": FunctionFragment;
    "transferAccidentallyLockedTokens(address,uint256)": FunctionFragment;
    "unstakeTokens(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "erc20Contract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeTokens",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAccidentallyLockedTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeTokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "erc20Contract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAccidentallyLockedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeTokens",
    data: BytesLike
  ): Result;

  events: {
    "TokensUnstaked(address,uint256)": EventFragment;
    "tokensStaked(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokensUnstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "tokensStaked"): EventFragment;
}

export type TokensUnstakedEvent = TypedEvent<
  [string, BigNumber],
  { to: string; amount: BigNumber }
>;

export type TokensUnstakedEventFilter = TypedEventFilter<TokensUnstakedEvent>;

export type tokensStakedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { id: BigNumber; from: string; amount: BigNumber }
>;

export type tokensStakedEventFilter = TypedEventFilter<tokensStakedEvent>;

export interface StakeContract extends BaseContract {
  contractName: "StakeContract";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakeContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    erc20Contract(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    stakeTokens(
      _token: string,
      _amount: BigNumberish,
      _option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        author: string;
        token: string;
        balance: BigNumber;
        balanceToWithdraw: BigNumber;
        initTime: BigNumber;
        withdrawTime: BigNumber;
      }
    >;

    transferAccidentallyLockedTokens(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeTokens(
      _stakeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  erc20Contract(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  stakeTokens(
    _token: string,
    _amount: BigNumberish,
    _option: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      author: string;
      token: string;
      balance: BigNumber;
      balanceToWithdraw: BigNumber;
      initTime: BigNumber;
      withdrawTime: BigNumber;
    }
  >;

  transferAccidentallyLockedTokens(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeTokens(
    _stakeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    erc20Contract(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    stakeTokens(
      _token: string,
      _amount: BigNumberish,
      _option: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        author: string;
        token: string;
        balance: BigNumber;
        balanceToWithdraw: BigNumber;
        initTime: BigNumber;
        withdrawTime: BigNumber;
      }
    >;

    transferAccidentallyLockedTokens(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeTokens(
      _stakeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TokensUnstaked(address,uint256)"(
      to?: null,
      amount?: null
    ): TokensUnstakedEventFilter;
    TokensUnstaked(to?: null, amount?: null): TokensUnstakedEventFilter;

    "tokensStaked(uint256,address,uint256)"(
      id?: null,
      from?: null,
      amount?: null
    ): tokensStakedEventFilter;
    tokensStaked(
      id?: null,
      from?: null,
      amount?: null
    ): tokensStakedEventFilter;
  };

  estimateGas: {
    erc20Contract(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    stakeTokens(
      _token: string,
      _amount: BigNumberish,
      _option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferAccidentallyLockedTokens(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeTokens(
      _stakeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    erc20Contract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeTokens(
      _token: string,
      _amount: BigNumberish,
      _option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAccidentallyLockedTokens(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeTokens(
      _stakeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
